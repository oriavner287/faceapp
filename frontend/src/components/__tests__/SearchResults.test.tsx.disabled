import React from "react"
import { render, screen, fireEvent, waitFor } from "@testing-library/react"
import { vi } from "vitest"
import SearchResults from "../SearchResults"

// Mock data for testing
const mockResults = [
  {
    id: "test-1",
    title: "Test Video 1",
    thumbnailUrl: "https://example.com/thumb1.jpg",
    videoUrl: "https://example.com/video1",
    sourceWebsite: "Site 1",
    similarityScore: 0.95,
    faceCount: 2,
  },
  {
    id: "test-2",
    title: "Test Video 2 <script>alert('xss')</script>", // Test XSS protection
    thumbnailUrl: "https://example.com/thumb2.jpg",
    videoUrl: "https://example.com/video2",
    sourceWebsite: "Site 2",
    similarityScore: 0.75,
    faceCount: 1,
  },
  {
    id: "test-3",
    title: "Test Video 3",
    thumbnailUrl: "https://example.com/thumb3.jpg",
    videoUrl: "https://malicious-site.com/video3", // Test URL validation
    sourceWebsite: "Site 3",
    similarityScore: 0.45,
    faceCount: 3,
  },
]

// Mock window.open for security testing
const mockWindowOpen = vi.fn()
Object.defineProperty(window, "open", {
  value: mockWindowOpen,
  writable: true,
})

describe("SearchResults Component", () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  it("renders loading state correctly", () => {
    render(<SearchResults results={[]} isLoading={true} />)

    expect(
      screen.getByText("Searching for similar faces...")
    ).toBeInTheDocument()
    expect(screen.getByRole("progressbar")).toBeInTheDocument()
  })

  it("renders error state with sanitized message", () => {
    const errorMessage = "Network error <script>alert('xss')</script>"
    render(<SearchResults results={[]} error={errorMessage} />)

    expect(screen.getByText("Search Error")).toBeInTheDocument()
    // Should sanitize the error message (remove script tags)
    expect(screen.queryByText(/<script>/)).not.toBeInTheDocument()
  })

  it("renders no results state", () => {
    render(<SearchResults results={[]} />)

    expect(screen.getByText("No Similar Person Found")).toBeInTheDocument()
    expect(screen.getByText(/Try:/)).toBeInTheDocument()
  })

  it("renders results with sanitized data", () => {
    render(<SearchResults results={mockResults} />)

    expect(screen.getByText("Search Results")).toBeInTheDocument()
    expect(
      screen.getByText("Found 3 videos with similar faces")
    ).toBeInTheDocument()

    // Should display sanitized titles (XSS protection)
    expect(screen.getByText("Test Video 1")).toBeInTheDocument()
    expect(screen.getByText("Test Video 2 alert('xss')")).toBeInTheDocument() // Script tags removed
    expect(screen.queryByText(/<script>/)).not.toBeInTheDocument()
  })

  it("displays similarity scores correctly", () => {
    render(<SearchResults results={mockResults} />)

    // Should show percentage with proper rounding
    expect(screen.getByText("95%")).toBeInTheDocument()
    expect(screen.getByText("75%")).toBeInTheDocument()
    expect(screen.getByText("45%")).toBeInTheDocument()
  })

  it("handles sorting functionality", async () => {
    render(<SearchResults results={mockResults} />)

    // Test sort by title
    const sortSelect = screen.getByDisplayValue("Similarity")
    fireEvent.click(sortSelect)

    const titleOption = screen.getByText("Title")
    fireEvent.click(titleOption)

    await waitFor(() => {
      expect(screen.getByDisplayValue("Title")).toBeInTheDocument()
    })
  })

  it("handles filtering functionality", async () => {
    render(<SearchResults results={mockResults} />)

    // Test filter by high similarity
    const filterSelect = screen.getByDisplayValue(/All/)
    fireEvent.click(filterSelect)

    const highOption = screen.getByText(/High/)
    fireEvent.click(highOption)

    await waitFor(() => {
      expect(screen.getByDisplayValue(/High/)).toBeInTheDocument()
    })
  })

  it("handles threshold changes with validation", () => {
    const mockThresholdChange = vi.fn()
    render(
      <SearchResults
        results={mockResults}
        onThresholdChange={mockThresholdChange}
        currentThreshold={0.7}
      />
    )

    const thresholdSelect = screen.getByDisplayValue("0.7")
    fireEvent.click(thresholdSelect)

    const newThreshold = screen.getByText("0.8")
    fireEvent.click(newThreshold)

    expect(mockThresholdChange).toHaveBeenCalledWith(0.8)
  })

  it("validates video URLs before opening", () => {
    render(<SearchResults results={mockResults} />)

    const watchButtons = screen.getAllByText("Watch Video")

    // Click on valid URL (should open)
    if (watchButtons[0]) {
      fireEvent.click(watchButtons[0])
      expect(mockWindowOpen).toHaveBeenCalledWith(
        "https://example.com/video1",
        "_blank",
        "noopener,noreferrer"
      )
    }

    // Click on invalid URL (should not open)
    if (watchButtons[2]) {
      fireEvent.click(watchButtons[2])
      // Should not call window.open for malicious URL
      expect(mockWindowOpen).toHaveBeenCalledTimes(1)
    }
  })

  it("handles image load errors gracefully", () => {
    render(<SearchResults results={mockResults} />)

    const images = screen.getAllByRole("img")

    // Simulate image load error
    if (images[0]) {
      fireEvent.error(images[0])

      // Should handle error without crashing
      expect(images[0]).toHaveStyle("display: none")
    }
  })

  it("limits displayed results for security", () => {
    // Create array with more than MAX_RESULTS_DISPLAY (100)
    const manyResults = Array.from({ length: 150 }, (_, i) => ({
      id: `test-${i}`,
      title: `Test Video ${i}`,
      thumbnailUrl: `https://example.com/thumb${i}.jpg`,
      videoUrl: `https://example.com/video${i}`,
      sourceWebsite: "Site 1",
      similarityScore: 0.8,
      faceCount: 1,
    }))

    render(<SearchResults results={manyResults} />)

    // Should only display up to MAX_RESULTS_DISPLAY
    expect(
      screen.getByText("Found 100 videos with similar faces")
    ).toBeInTheDocument()
  })

  it("sanitizes similarity scores to prevent precision attacks", () => {
    const precisionResults = [
      {
        id: "precision-test",
        title: "Precision Test",
        thumbnailUrl: "https://example.com/thumb.jpg",
        videoUrl: "https://example.com/video",
        sourceWebsite: "Site 1",
        similarityScore: 0.123456789, // High precision input
        faceCount: 1,
      },
    ]

    render(<SearchResults results={precisionResults} />)

    // Should round to 2 decimal places (12% not 12.3456789%)
    expect(screen.getByText("12%")).toBeInTheDocument()
  })

  it("cleans up on unmount for privacy", () => {
    const { unmount } = render(<SearchResults results={mockResults} />)

    // Component should unmount without errors and clean up state
    expect(() => unmount()).not.toThrow()
  })
})
